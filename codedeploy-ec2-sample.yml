# https://docs.aws.amazon.com/codedeploy/latest/userguide/instances-ec2-create-cloudformation-template.html
Description: >-
  Create instances ready for CodeDeploy: Create up to 3 Amazon EC2 instances
  with an associated instance profile and install the AWS CodeDeploy Agent.
  **WARNING** This template creates one or more Amazon EC2 instances. You will
  be billed for the AWS resources used if you create a stack from this template.
  Copyright [2012-2014] Amazon.com, Inc. or its affiliates. All Rights Reserved.
  Licensed under the Apache License, Version 2.0 (the "License"). You may not
  use this file except in compliance with the License. A copy of the License is
  located at http://aws.amazon.com/apache2.0/ or in the "license" file
  accompanying this file. This file is distributed on an "AS IS" BASIS, WITHOUT
  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  License for the specific language governing permissions and limitations under
  the License.
AWSTemplateFormatVersion: 2010-09-09
Parameters:
  TagKey:
    Description: The EC2 tag key that identifies this as a target for deployments.
    Type: String
    Default: Name
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
  TagValue:
    Description: The EC2 tag value that identifies this as a target for deployments.
    Type: String
    Default: CodeDeployDemo
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: Can contain only ASCII characters.
  KeyPairName:
    Description: >-
      Name of an existing Amazon EC2 key pair to enable SSH or RDP access to the
      instances.
    Type: String
    MinLength: '1'
    MaxLength: '255'
    AllowedPattern: '[\x20-\x7E]*'
    ConstraintDescription: KeyPairName is a required Field and can contain only ASCII characters.
  InstanceType:
    Description: Amazon EC2 instance type.
    Type: String
    Default: t1.micro
    ConstraintDescription: Must be a valid Amazon EC2 instance type.
  InstanceCount:
    Description: Number of Amazon EC2 instances (Must be a number between 1 and 3).
    Type: Number
    Default: '1'
    ConstraintDescription: Must be a number between 1 and 3.
    MinValue: '1'
    MaxValue: '3'
  OperatingSystem:
    Description: Amazon EC2 operating system type (Linux or Windows).
    Type: String
    Default: Linux
    ConstraintDescription: Must be Windows or Linux.
    AllowedValues:
      - Linux
      - Windows
  SSHLocation:
    Description: >-
      The IP address range that can be used to connect using SSH or RDP to the
      Amazon EC2 instances.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  RegionOS2AMI:
    us-east-1:
      Linux: ami-246ed34c
      Windows: ami-ac3a1cc4
    us-west-2:
      Linux: ami-55a7ea65
      Windows: ami-7f634e4f
  OS2SSHPort:
    Linux:
      SSHPort: '22'
    Windows:
      SSHPort: '3389'
Conditions:
  LaunchInstance2: !Or 
    - !Equals 
      - '2'
      - !Ref InstanceCount
    - !Equals 
      - '3'
      - !Ref InstanceCount
  LaunchInstance3: !Equals 
    - '3'
    - !Ref InstanceCount
  LaunchLinuxEC2Instance1: !Equals 
    - !Ref OperatingSystem
    - Linux
  LaunchLinuxEC2Instance2: !And 
    - !Condition LaunchLinuxEC2Instance1
    - !Condition LaunchInstance2
  LaunchLinuxEC2Instance3: !And 
    - !Condition LaunchLinuxEC2Instance1
    - !Condition LaunchInstance3
  LaunchWindowsEC2Instance1: !Equals 
    - !Ref OperatingSystem
    - Windows
  LaunchWindowsEC2Instance2: !And 
    - !Condition LaunchWindowsEC2Instance1
    - !Condition LaunchInstance2
  LaunchWindowsEC2Instance3: !And 
    - !Condition LaunchWindowsEC2Instance1
    - !Condition LaunchInstance3
Resources:
  LinuxEC2Instance:
    Type: 'AWS::EC2::Instance'
    Condition: LaunchLinuxEC2Instance1
    Metadata:
      'AWS::CloudFormation::Init':
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'
      'AWS::CloudFormation::Designer':
        id: d96d146a-7463-4a6c-8a09-b6fe14fc2e1d
    Properties:
      ImageId: !FindInMap 
        - RegionOS2AMI
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -ex
            - |
              yum update -y aws-cfn-bootstrap
            - |
              yum install -y aws-cli
            - |
              # Helper function.
            - |
              function error_exit
            - |
              {
            - '  /opt/aws/bin/cfn-signal -e 1 -r "$1" '''
            - !Ref WaitHandle
            - |
              '
            - |2
                exit 1
            - |
              }
            - |
              # Install the AWS CodeDeploy Agent.
            - |
              cd /home/ec2-user/
            - >
              aws s3 cp
              's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm'
              . || error_exit 'Failed to download AWS CodeDeploy Agent.'
            - >
              yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed
              to install AWS CodeDeploy Agent.' 
            - '/opt/aws/bin/cfn-init -s '
            - !Ref 'AWS::StackId'
            - ' -r LinuxEC2Instance --region '
            - !Ref 'AWS::Region'
            - |2
               || error_exit 'Failed to run cfn-init.'
            - |
              # All is well, so signal success.
            - >-
              /opt/aws/bin/cfn-signal -e 0 -r "AWS CodeDeploy Agent setup
              complete." '
            - !Ref WaitHandle
            - |
              '
      KeyName: !Ref KeyPairName
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      IamInstanceProfile: !Ref InstanceRoleInstanceProfile
  WindowsEC2Instance:
    Type: 'AWS::EC2::Instance'
    Condition: LaunchWindowsEC2Instance1
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          commands:
            00-download-host-agent:
              command: !Join 
                - ''
                - - 'powershell.exe -Command "Read-S3Object '
                  - '-BucketName aws-codedeploy-us-east-1 '
                  - '-Key latest/codedeploy-agent.msi '
                  - '-File codedeploy-agent.msi"'
              cwd: 'C:/cfn'
              waitAfterCompletion: 0
            01-install-host-agent:
              command: >-
                C:\cfn\codedeploy-agent.msi /quiet /l
                C:\cfn\host-agent-install-log.txt
              ignoreErrors: 'true'
              waitAfterCompletion: 0
            02-signal-ready:
              command: !Join 
                - ''
                - - '"C:\Program Files\Amazon\cfn-bootstrap\cfn-signal"'
                  - ' -e 0 "'
                  - !Ref WaitHandle
                  - '"'
              waitAfterCompletion: 0
          services:
            windows:
              codedeploy-agent:
                enabled: 'true'
                ensureRunning: 'true'
                commands:
                  - 01-install-host-agent
      'AWS::CloudFormation::Designer':
        id: b80318f5-c7ff-477e-bbf7-1a2f50ab27a8
    Properties:
      ImageId: !FindInMap 
        - RegionOS2AMI
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              <script>
            - |
              mkdir c:\cfn
            - |
              mkdir c:\cfn\log
            - 'c:\"Program Files"\Amazon\cfn-bootstrap\cfn-init.exe -s '
            - !Ref 'AWS::StackName'
            - ' --region '
            - !Ref 'AWS::Region'
            - ' -r WindowsEC2Instance > c:\cfn\log\cfn-call-log 2>&1'
            - </script>
      KeyName: !Ref KeyPairName
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      IamInstanceProfile: !Ref InstanceRoleInstanceProfile
  WaitHandle:
    Type: 'AWS::CloudFormation::WaitConditionHandle'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9987727f-2de2-43a8-90d9-8afeeb94f6c9
  WaitCondition:
    Type: 'AWS::CloudFormation::WaitCondition'
    Properties:
      Count: !Ref InstanceCount
      Handle: !Ref WaitHandle
      Timeout: '900'
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 1905c72e-bdd7-49a9-8cd8-49fdb14e686b
  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP access via port 80 and SSH access.
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: !FindInMap 
            - OS2SSHPort
            - !Ref OperatingSystem
            - SSHPort
          ToPort: !FindInMap 
            - OS2SSHPort
            - !Ref OperatingSystem
            - SSHPort
          CidrIp: !Ref SSHLocation
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 45f1f5aa-db7a-4d99-82d3-3b52e603afd9
  CodeDeployTrustRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              Service:
                - codedeploy.us-east-1.amazonaws.com
                - codedeploy.us-west-2.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 9c4dfefd-c560-456f-a485-638a3f239ce3
  CodeDeployRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: CodeDeployPolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - 'ec2:Describe*'
          - Effect: Allow
            Resource:
              - '*'
            Action:
              - 'autoscaling:CompleteLifecycleAction'
              - 'autoscaling:DeleteLifecycleHook'
              - 'autoscaling:DescribeLifecycleHooks'
              - 'autoscaling:DescribeAutoScalingGroups'
              - 'autoscaling:PutLifecycleHook'
              - 'autoscaling:RecordLifecycleActionHeartbeat'
      Roles:
        - !Ref CodeDeployTrustRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 8e57c003-2be3-4462-99a0-1111346138ab
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
    Metadata:
      'AWS::CloudFormation::Designer':
        id: 27e14b06-ccc8-4f3c-82e8-2d53818d8481
  InstanceRolePolicies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: InstanceRole
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - 'autoscaling:Describe*'
              - 'cloudformation:Describe*'
              - 'cloudformation:GetTemplate'
              - 's3:Get*'
            Resource: '*'
      Roles:
        - !Ref InstanceRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: bb1c0a10-ebd1-42f3-b281-8a57248060ca
  InstanceRoleInstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
    Metadata:
      'AWS::CloudFormation::Designer':
        id: eca8d523-5326-4651-9568-75300503136d
  LinuxEC2Instance2:
    Type: 'AWS::EC2::Instance'
    Condition: LaunchLinuxEC2Instance2
    Metadata:
      'AWS::CloudFormation::Init':
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'
      'AWS::CloudFormation::Designer':
        id: e5274a21-2e25-4c24-91f6-22fae3bc520a
    Properties:
      ImageId: !FindInMap 
        - RegionOS2AMI
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -ex
            - |
              yum update -y aws-cfn-bootstrap
            - |
              yum install -y aws-cli
            - |
              # Helper function.
            - |
              function error_exit
            - |
              {
            - '  /opt/aws/bin/cfn-signal -e 1 -r "$1" '''
            - !Ref WaitHandle
            - |
              '
            - |2
                exit 1
            - |
              }
            - |
              # Install the AWS CodeDeploy Agent.
            - |
              cd /home/ec2-user/
            - >
              aws s3 cp
              's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm'
              . || error_exit 'Failed to download AWS CodeDeploy Agent.'
            - >
              yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed
              to install AWS CodeDeploy Agent.' 
            - '/opt/aws/bin/cfn-init -s '
            - !Ref 'AWS::StackId'
            - ' -r LinuxEC2Instance --region '
            - !Ref 'AWS::Region'
            - |2
               || error_exit 'Failed to run cfn-init.'
            - |
              # All is well, so signal success.
            - >-
              /opt/aws/bin/cfn-signal -e 0 -r "AWS CodeDeploy Agent setup
              complete." '
            - !Ref WaitHandle
            - |
              '
      KeyName: !Ref KeyPairName
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      IamInstanceProfile: !Ref InstanceRoleInstanceProfile
  WindowsEC2Instance2:
    Type: 'AWS::EC2::Instance'
    Condition: LaunchWindowsEC2Instance2
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          commands:
            00-download-host-agent:
              command: !Join 
                - ''
                - - 'powershell.exe -Command "Read-S3Object '
                  - '-BucketName aws-codedeploy-us-east-1 '
                  - '-Key latest/codedeploy-agent.msi '
                  - '-File codedeploy-agent.msi"'
              cwd: 'C:/cfn'
              waitAfterCompletion: 0
            01-install-host-agent:
              command: >-
                C:\cfn\codedeploy-agent.msi /quiet /l
                C:\cfn\host-agent-install-log.txt
              ignoreErrors: 'true'
              waitAfterCompletion: 0
            02-signal-ready:
              command: !Join 
                - ''
                - - '"C:\Program Files\Amazon\cfn-bootstrap\cfn-signal"'
                  - ' -e 0 "'
                  - !Ref WaitHandle
                  - '"'
              waitAfterCompletion: 0
          services:
            windows:
              codedeploy-agent:
                enabled: 'true'
                ensureRunning: 'true'
                commands:
                  - 01-install-host-agent
      'AWS::CloudFormation::Designer':
        id: 9e5c91cd-764a-4900-8d7f-5ff149fcb7a6
    Properties:
      ImageId: !FindInMap 
        - RegionOS2AMI
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              <script>
            - |
              mkdir c:\cfn
            - |
              mkdir c:\cfn\log
            - 'c:\"Program Files"\Amazon\cfn-bootstrap\cfn-init.exe -s '
            - !Ref 'AWS::StackName'
            - ' --region '
            - !Ref 'AWS::Region'
            - ' -r WindowsEC2Instance > c:\cfn\log\cfn-call-log 2>&1'
            - </script>
      KeyName: !Ref KeyPairName
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      IamInstanceProfile: !Ref InstanceRoleInstanceProfile
  LinuxEC2Instance3:
    Type: 'AWS::EC2::Instance'
    Condition: LaunchLinuxEC2Instance3
    Metadata:
      'AWS::CloudFormation::Init':
        services:
          sysvint:
            codedeploy-agent:
              enabled: 'true'
              ensureRunning: 'true'
      'AWS::CloudFormation::Designer':
        id: 62ea2b83-2ac8-46c5-b864-b85d26269c39
    Properties:
      ImageId: !FindInMap 
        - RegionOS2AMI
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              #!/bin/bash -ex
            - |
              yum update -y aws-cfn-bootstrap
            - |
              yum install -y aws-cli
            - |
              # Helper function.
            - |
              function error_exit
            - |
              {
            - '  /opt/aws/bin/cfn-signal -e 1 -r "$1" '''
            - !Ref WaitHandle
            - |
              '
            - |2
                exit 1
            - |
              }
            - |
              # Install the AWS CodeDeploy Agent.
            - |
              cd /home/ec2-user/
            - >
              aws s3 cp
              's3://aws-codedeploy-us-east-1/latest/codedeploy-agent.noarch.rpm'
              . || error_exit 'Failed to download AWS CodeDeploy Agent.'
            - >
              yum -y install codedeploy-agent.noarch.rpm || error_exit 'Failed
              to install AWS CodeDeploy Agent.' 
            - '/opt/aws/bin/cfn-init -s '
            - !Ref 'AWS::StackId'
            - ' -r LinuxEC2Instance --region '
            - !Ref 'AWS::Region'
            - |2
               || error_exit 'Failed to run cfn-init.'
            - |
              # All is well, so signal success.
            - >-
              /opt/aws/bin/cfn-signal -e 0 -r "AWS CodeDeploy Agent setup
              complete." '
            - !Ref WaitHandle
            - |
              '
      KeyName: !Ref KeyPairName
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      IamInstanceProfile: !Ref InstanceRoleInstanceProfile
  WindowsEC2Instance3:
    Type: 'AWS::EC2::Instance'
    Condition: LaunchWindowsEC2Instance3
    Metadata:
      'AWS::CloudFormation::Init':
        config:
          commands:
            00-download-host-agent:
              command: !Join 
                - ''
                - - 'powershell.exe -Command "Read-S3Object '
                  - '-BucketName aws-codedeploy-us-east-1 '
                  - '-Key latest/codedeploy-agent.msi '
                  - '-File codedeploy-agent.msi"'
              cwd: 'C:/cfn'
              waitAfterCompletion: 0
            01-install-host-agent:
              command: >-
                C:\cfn\codedeploy-agent.msi /quiet /l
                C:\cfn\host-agent-install-log.txt
              ignoreErrors: 'true'
              waitAfterCompletion: 0
            02-signal-ready:
              command: !Join 
                - ''
                - - '"C:\Program Files\Amazon\cfn-bootstrap\cfn-signal"'
                  - ' -e 0 "'
                  - !Ref WaitHandle
                  - '"'
              waitAfterCompletion: 0
          services:
            windows:
              codedeploy-agent:
                enabled: 'true'
                ensureRunning: 'true'
                commands:
                  - 01-install-host-agent
      'AWS::CloudFormation::Designer':
        id: 419a2f03-b32b-409c-95de-a6cff6a9adfe
    Properties:
      ImageId: !FindInMap 
        - RegionOS2AMI
        - !Ref 'AWS::Region'
        - !Ref OperatingSystem
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref SecurityGroup
      UserData: !Base64 
        'Fn::Join':
          - ''
          - - |
              <script>
            - |
              mkdir c:\cfn
            - |
              mkdir c:\cfn\log
            - 'c:\"Program Files"\Amazon\cfn-bootstrap\cfn-init.exe -s '
            - !Ref 'AWS::StackName'
            - ' --region '
            - !Ref 'AWS::Region'
            - ' -r WindowsEC2Instance > c:\cfn\log\cfn-call-log 2>&1'
            - </script>
      KeyName: !Ref KeyPairName
      Tags:
        - Key: !Ref TagKey
          Value: !Ref TagValue
      IamInstanceProfile: !Ref InstanceRoleInstanceProfile
Outputs:
  CodeDeployTrustRoleARN:
    Value: !GetAtt 
      - CodeDeployTrustRole
      - Arn
Metadata:
  'AWS::CloudFormation::Designer':
    27e14b06-ccc8-4f3c-82e8-2d53818d8481:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 90
      z: 1
      embeds: []
    eca8d523-5326-4651-9568-75300503136d:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 90
      z: 1
      embeds: []
      isassociatedwith:
        - 27e14b06-ccc8-4f3c-82e8-2d53818d8481
    bb1c0a10-ebd1-42f3-b281-8a57248060ca:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 210
      z: 1
      embeds: []
      isassociatedwith:
        - 27e14b06-ccc8-4f3c-82e8-2d53818d8481
    9c4dfefd-c560-456f-a485-638a3f239ce3:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 210
      z: 1
      embeds: []
    8e57c003-2be3-4462-99a0-1111346138ab:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 90
      z: 1
      embeds: []
      isassociatedwith:
        - 9c4dfefd-c560-456f-a485-638a3f239ce3
    45f1f5aa-db7a-4d99-82d3-3b52e603afd9:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 210
      z: 1
      embeds: []
    419a2f03-b32b-409c-95de-a6cff6a9adfe:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 330
      z: 1
      embeds: []
      isassociatedwith:
        - 45f1f5aa-db7a-4d99-82d3-3b52e603afd9
    9e5c91cd-764a-4900-8d7f-5ff149fcb7a6:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 330
      z: 1
      embeds: []
      isassociatedwith:
        - 45f1f5aa-db7a-4d99-82d3-3b52e603afd9
    9987727f-2de2-43a8-90d9-8afeeb94f6c9:
      size:
        width: 60
        height: 60
      position:
        x: 300
        'y': 330
      z: 1
      embeds: []
    62ea2b83-2ac8-46c5-b864-b85d26269c39:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 90
      z: 1
      embeds: []
      isassociatedwith:
        - 45f1f5aa-db7a-4d99-82d3-3b52e603afd9
    e5274a21-2e25-4c24-91f6-22fae3bc520a:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 210
      z: 1
      embeds: []
      isassociatedwith:
        - 45f1f5aa-db7a-4d99-82d3-3b52e603afd9
    1905c72e-bdd7-49a9-8cd8-49fdb14e686b:
      size:
        width: 60
        height: 60
      position:
        x: 420
        'y': 330
      z: 1
      embeds: []
      isassociatedwith:
        - 9987727f-2de2-43a8-90d9-8afeeb94f6c9
    b80318f5-c7ff-477e-bbf7-1a2f50ab27a8:
      size:
        width: 60
        height: 60
      position:
        x: 60
        'y': 450
      z: 1
      embeds: []
      isassociatedwith:
        - 45f1f5aa-db7a-4d99-82d3-3b52e603afd9
    d96d146a-7463-4a6c-8a09-b6fe14fc2e1d:
      size:
        width: 60
        height: 60
      position:
        x: 180
        'y': 450
      z: 1
      embeds: []
      isassociatedwith:
        - 45f1f5aa-db7a-4d99-82d3-3b52e603afd9
